#!/usr/bin/env python
from waflib.extras import autowaf as autowaf
from waflib import Options, TaskGen
import waflib.Logs as Logs, waflib.Utils as Utils
import os
import shutil
import sys
import re
import time
from waflib.Task import Task

top = '.'
out = 'build'

def options(opt):
    autowaf.set_options(opt)

def configure(conf):
    if not "dummy" in conf.env['BACKENDS']:
        print ('lua-session depend on the dummy backend.')

    conf.load('misc')
    conf.load('compiler_cxx')
    conf.check_cc(function_name='readline',
            header_name='readline/readline.h',
            lib='readline',
            uselib_store='READLINE',
            mandatory=False)
    autowaf.configure(conf)

def build(bld):
    VERSION = "%s.%s" % (bld.env['MAJOR'], bld.env['MINOR'])
    if not bld.is_defined('HAVE_READLINE'):
            return;
    # no wine
    if bld.is_defined('WINDOWS_VST_SUPPORT') and bld.env['build_target'] != 'mingw':
        return
    # not just yet..
    if bld.env['build_target'] == 'mingw':
            return;

    #  TEST/DEVEL TOOL
    obj = bld (features = 'cxx c cxxprogram')
    obj.source       = 'devel.cc'
    obj.target       = 'devel'
    obj.uselib       = ['SIGCPP', 'READLINE']
    obj.use          = ['liblua']
    obj.install_path = None

    # real thing
    if not "dummy" in bld.env['BACKENDS']:
        print ('luasession depend on the dummy backend.')
        return

    obj = bld (features = 'cxx c cxxprogram')
    obj.source       = 'luasession.cc'
    obj.target       = 'luasession'
    obj.includes     = ['../libs']
    obj.use          = ['liblua'
                        'libpbd',
                        'libardour',
                        'libardour_cp',
                        'libtimecode',
                        'libmidipp',
                     ]
    obj.defines = [
        'VERSIONSTRING="' + str(bld.env['VERSION']) + '"',
        'DATA_DIR="'   + os.path.normpath(bld.env['DATADIR']) + '"',
        'CONFIG_DIR="' + os.path.normpath(bld.env['SYSCONFDIR']) + '"',
        'LOCALEDIR="'  + os.path.join(os.path.normpath(bld.env['DATADIR']), 'locale') + '"',
        'PACKAGE="'    + "ARDOURUTILS" + '"',
        ]

    obj.uselib       = 'UUID FLAC FONTCONFIG GLIBMM GTHREAD OGG CURL DL'
    obj.uselib       += ' FFTW3F'
    obj.uselib       += ' AUDIOUNITS OSX LO '
    obj.uselib       += ' TAGLIB '
    obj.uselib       += ' READLINE '

    if sys.platform == 'darwin':
        obj.uselib += ' AUDIOUNITS OSX'
        obj.use    += ' libappleutility'

    if bld.env['build_target'] == 'mingw':
        if bld.env['DEBUG'] == False:
            obj.linkflags = ['-mwindows']

    if bld.is_defined('NEED_INTL'):
        obj.linkflags = ' -lintl'

    #obj.install_path = bld.env['LIBDIR'] + '/utils'
    obj.install_path = None
